{"name":"Iggy","tagline":"A tool for consistency based analysis of influence graphs and observed systems behavior","body":"## Sign Consistency on Influence Graphs - Diagnosis, Repair, Prediction\r\n\r\nFor many biological systems knowledge bases are available that describe the interaction of its components usually in terms of causal networks and influence graphs. In particular signed influence graphs where edges indicate either positive or negative effect of one node upon another. Building upon a notion of consistency between biochemical/genetic regulations and high-throughput profiles of cell activity. We present an approach to check the consistency of large-scale data sets, provide explanations for inconsistencies by determining minimal representations of conflicts. In practice, this can be used to identify unreliable data or to indicate missing reactions. Further, we address the problem of repairing networks and corresponding yet often discrepant measurements in order to re-establish their mutual consistency and predict unobserved variations even under inconsistency. \r\n[![DOI](https://zenodo.org/badge/5393/bioasp/iggy.png)](http://dx.doi.org/10.5281/zenodo.11098)\r\n\r\n### Installation\r\n\r\nYou can install iggy by running:\r\n\r\n\t$ pip install --user iggy\r\n\r\nThe executable scripts can then be found in ~/.local/bin.\r\n\r\n\r\n### Usage\r\n\r\nTypical usage is:\r\n\r\n\t$ iggy.py network.sif observation.obs --show_colorings 10 --show_predictions\r\n\r\nFor more options you can ask for help as follows:\r\n\r\n\t$ iggy.py -h \t\t\r\n\tusage: iggy.py [-h] [--no_zero_constraints]\r\n               [--propagate_unambigious_influences] [--no_founded_constraint]\r\n               [--autoinputs] [--scenfit] [--show_colorings SHOW_COLORINGS]\r\n               [--show_predictions]\r\n               networkfile observationfile\r\n\r\n\tpositional arguments:\r\n\t  networkfile           influence graph in SIF format\r\n\t  observationfile       observations in bioquali format\r\n\r\n\toptional arguments:\r\n\t  -h, --help            show this help message and exit\r\n\t  --no_zero_constraints\r\n\t\t\t\tturn constraints on zero variations OFF, default is ON\r\n\t  --propagate_unambigious_influences\r\n\t\t\t\tturn constraints ON that if all predecessor of a node\r\n\t\t\t\thave the same influence this must have an effect,\r\n\t\t\t\tdefault is ON\r\n\t  --no_founded_constraint\r\n\t\t\t\tturn constraints OFF that every variation must be\r\n\t\t\t\texplained by an input, default is ON\r\n\t  --autoinputs          compute possible inputs of the network (nodes with\r\n\t\t\t\tindegree 0)\r\n\t  --scenfit             compute scenfit of the data, default is mcos\r\n\t  --show_colorings SHOW_COLORINGS\r\n\t\t\t\tnumber of colorings to print, default is OFF, 0=all\r\n\t  --show_predictions    show predictions\r\n\r\n\r\nThe second script contained is opt_graph.py\r\nTypical usage is:\r\n\r\n\t$ opt_graph.py network.sif observations_dir/ --show_repairs 10\r\n\r\nFor more options you can ask for help as follows:\r\n\r\n\t$ opt_graph.py -h \t\r\n\tusage: opt_graph.py [-h] [--no_zero_constraints]\r\n\t\t    [--propagate_unambigious_influences]\r\n\t\t    [--no_founded_constraint] [--autoinputs]\r\n\t\t    [--show_repairs SHOW_REPAIRS] [--opt_graph]\r\n\t\t    networkfile observationfiles\r\n\r\n\tpositional arguments:\r\n\t  networkfile           influence graph in SIF format\r\n\t  observationfiles      directory of observations in bioquali format\r\n\r\n\toptional arguments:\r\n\t  -h, --help            show this help message and exit\r\n\t  --no_zero_constraints\r\n\t\t\t\tturn constraints on zero variations OFF, default is ON\r\n\t  --propagate_unambigious_influences\r\n\t\t\t\tturn constraints ON that if all predecessor of a node\r\n\t\t\t\thave the same influence this must have an effect,\r\n\t\t\t\tdefault is ON\r\n\t  --no_founded_constraint\r\n\t\t\t\tturn constraints OFF that every variation must be\r\n\t\t\t\texplained by an input, default is ON\r\n\t  --autoinputs          compute possible inputs of the network (nodes with\r\n\t\t\t\tindegree 0)\r\n\t  --show_repairs SHOW_REPAIRS\r\n\t\t\t\tnumber of repairs to show, default is OFF, 0=all\r\n\t  --opt_graph           compute opt-graph repairs (allows also adding edges),\r\n\t\t\t\tdefault is only removing edges\r\n\r\n\r\n### Samples\r\n\r\nSample files available here: [iggy_demo_data.tar.gz](http://www.cs.uni-potsdam.de/~sthiele/bioasp/downloads/samples/iggy_demo_data.tar.gz)\r\n\r\n### Related publications\r\n\r\n* Detecting Inconsistencies in Large Biological Networks with Answer Set Programming. (2011). Theory and Practice of Logic Programming. [DOI](http://dx.doi.org/10.1007/978-3-540-89982-2_19)\r\n\r\n* Repair and Prediction (under Inconsistency) in Large Biological Networks with Answer Set Programming.(2010). 12th International Conference on the Principles of Knowledge Representation and Reasoning.[DOI](http://aaai.org/ocs/index.php/KR/KR2010/paper/view/1334/1660)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}